generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Companies {
  id         Int         @id @default(autoincrement())
  name       String
  address    String
  isArchived Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
  Users      Users[]
  Locations  Locations[]
}

model Users {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  assetUrl   String
  companyId  Int
  company    Companies @relation(fields: [companyId], references: [id])
  isArchived Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
}

model Locations {
  id                           Int                            @id @default(autoincrement())
  name                         String
  address                      String
  companyId                    Int
  company                      Companies                      @relation(fields: [companyId], references: [id])
  isArchived                   Boolean                        @default(false)
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @default(now()) @updatedAt
  Tables                       Tables[]
  MenusMenuCategoriesLocations MenusMenuCategoriesLocations[]
  Orders                       Orders[]
}

model Tables {
  id         Int       @id @default(autoincrement())
  name       String
  assetUrl   String?
  locationId Int
  location   Locations @relation(fields: [locationId], references: [id])
  isArchived Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  Orders     Orders[]
}

model Menus {
  id                           Int                            @id @default(autoincrement())
  name                         String
  price                        Int
  assetUrl                     String?
  isArchived                   Boolean                        @default(false)
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @default(now()) @updatedAt
  MenusAddonCategories         MenusAddonCategories[]
  MenusMenuCategoriesLocations MenusMenuCategoriesLocations[]
  Orderlines                   Orderlines[]
}

model MenuCategories {
  id                           Int                            @id @default(autoincrement())
  name                         String
  isArchived                   Boolean                        @default(false)
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @default(now()) @updatedAt
  MenusMenuCategoriesLocations MenusMenuCategoriesLocations[]
}

model AddonCategories {
  id                   Int                    @id @default(autoincrement())
  name                 String
  isRequired           Boolean                @default(false)
  isArchived           Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now()) @updatedAt
  Addons               Addons[]
  MenusAddonCategories MenusAddonCategories[]
}

model Addons {
  id              Int             @id @default(autoincrement())
  name            String
  price           Int
  isAvailable     Boolean         @default(true)
  addonCategoryId Int
  addonCategory   AddonCategories @relation(fields: [addonCategoryId], references: [id])
  isArchived      Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt
  Orderlines      Orderlines[]
}

model MenusAddonCategories {
  id              Int             @id @default(autoincrement())
  menuId          Int
  menu            Menus           @relation(fields: [menuId], references: [id])
  addonCategoryId Int
  addonCategory   AddonCategories @relation(fields: [addonCategoryId], references: [id])
  isArchived      Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt
}

model MenusMenuCategoriesLocations {
  id             Int            @id @default(autoincrement())
  menuId         Int?
  menu           Menus?         @relation(fields: [menuId], references: [id])
  menuCategoryId Int
  menuCategory   MenuCategories @relation(fields: [menuCategoryId], references: [id])
  locationId     Int?
  location       Locations?      @relation(fields: [locationId], references: [id])
  isArchived     Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
}

model Orders {
  id         Int          @id @default(autoincrement())
  locationId Int
  location   Locations    @relation(fields: [locationId], references: [id])
  tableId    Int
  table      Tables       @relation(fields: [tableId], references: [id])
  idPaid     Boolean      @default(false)
  price      Int          @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt
  Orderlines Orderlines[]
}

model Orderlines {
  id        Int      @id @default(autoincrement())
  menuId    Int
  menu      Menus    @relation(fields: [menuId], references: [id])
  orderId   Int
  order     Orders   @relation(fields: [orderId], references: [id])
  addonId   Int
  addon     Addons   @relation(fields: [addonId], references: [id])
  status OrderStatus @default(PENDING)
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum OrderStatus {
  PENDING
  PREPARING
  COMPLETE
  REJECTED  
}